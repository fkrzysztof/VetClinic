// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetClinic.Data;

namespace VetClinic.Data.Migrations
{
    [DbContext(typeof(VetClinicContext))]
    [Migration("20191208173107_new_field_Title_in_News")]
    partial class new_field_Title_in_News
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VetClinic.Data.Data.CMS.RecentNews", b =>
                {
                    b.Property<int>("RecentNewsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LinkTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("RecentNewsID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("RecentNews");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.InaccessibleDay", b =>
                {
                    b.Property<int>("InaccessibleDayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("InaccessibleDayID");

                    b.ToTable("InaccessibleDays");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.MedicalSpecialization", b =>
                {
                    b.Property<int>("MedicalSpecializationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SpecializationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("MedicalSpecializationID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("SpecializationID");

                    b.HasIndex("UpdatedUserID");

                    b.HasIndex("UserID");

                    b.ToTable("MedicalSpecializations");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.Medicine", b =>
                {
                    b.Property<int>("MedicineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MedicineTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("MedicineID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("MedicineTypeID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.MedicineType", b =>
                {
                    b.Property<int>("MedicineTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("MedicineTypeID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("MedicineTypes");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.News", b =>
                {
                    b.Property<int>("NewsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeID")
                        .HasColumnType("int");

                    b.HasKey("NewsID");

                    b.HasIndex("UpdatedUserID");

                    b.HasIndex("UserID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("News");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("KennelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("PatientUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("PatientID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("PatientTypeID");

                    b.HasIndex("PatientUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.PatientType", b =>
                {
                    b.Property<int>("PatientTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("PatientTypeID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("PatientTypes");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("PermissionID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfVisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("ReservationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("ReservationID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("PatientID");

                    b.HasIndex("ReservationUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.ScheduleBlock", b =>
                {
                    b.Property<int>("ScheduleBlockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TimeInterval")
                        .HasColumnType("time");

                    b.HasKey("ScheduleBlockID");

                    b.ToTable("ScheduleBlocks");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.Specialization", b =>
                {
                    b.Property<int>("SpecializationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("SpecializationID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.Treatment", b =>
                {
                    b.Property<int>("TreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("TreatmentID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoginAttempt")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserTypeID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.UserType", b =>
                {
                    b.Property<int>("UserTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("UserTypeID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.UserTypePermission", b =>
                {
                    b.Property<int>("UserPermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Access")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeID")
                        .HasColumnType("int");

                    b.HasKey("UserPermissionID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("PermissionID");

                    b.HasIndex("UpdatedUserID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("UserTypePermissions");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.Visit", b =>
                {
                    b.Property<int>("VisitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfVisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.Property<int?>("VetID")
                        .HasColumnType("int");

                    b.Property<int>("VisitUserID")
                        .HasColumnType("int");

                    b.HasKey("VisitID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("PatientID");

                    b.HasIndex("TreatmentID");

                    b.HasIndex("UpdatedUserID");

                    b.HasIndex("VetID");

                    b.HasIndex("VisitUserID");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.VisitMedicine", b =>
                {
                    b.Property<int>("VisitMedicineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MedicineID")
                        .HasColumnType("int");

                    b.Property<int?>("VisitID")
                        .HasColumnType("int");

                    b.HasKey("VisitMedicineID");

                    b.HasIndex("MedicineID");

                    b.HasIndex("VisitID");

                    b.ToTable("VisitMedicines");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.VisitTreatment", b =>
                {
                    b.Property<int>("VisitTreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TreatmentID")
                        .HasColumnType("int");

                    b.Property<int?>("VisitID")
                        .HasColumnType("int");

                    b.HasKey("VisitTreatmentID");

                    b.HasIndex("TreatmentID");

                    b.HasIndex("VisitID");

                    b.ToTable("VisitTreatment");
                });

            modelBuilder.Entity("VetClinic.Data.Data.CMS.RecentNews", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.User", "RecentNewsAddedUser")
                        .WithMany("AddedRecentNews")
                        .HasForeignKey("AddedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "RecentNewsUpdatedUser")
                        .WithMany("UpdatedRecentNews")
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.MedicalSpecialization", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.User", "MedicalSpecializationAddedUser")
                        .WithMany("AddedMedicalSpecialization")
                        .HasForeignKey("AddedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.Specialization", "Specialization")
                        .WithMany("MedicalSpecializations")
                        .HasForeignKey("SpecializationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "MedicalSpecializationUpdatedUser")
                        .WithMany("UpdatedMedicalSpecialization")
                        .HasForeignKey("UpdatedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "MedicalSpecializationUser")
                        .WithMany("UserMedicalSpecialization")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.Medicine", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.User", "MedicineAddedUser")
                        .WithMany("AddedMedicines")
                        .HasForeignKey("AddedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.MedicineType", "MedicineType")
                        .WithMany("Medicines")
                        .HasForeignKey("MedicineTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "MedicineUpdatedUser")
                        .WithMany("UpdatedMedicines")
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.MedicineType", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.User", "MedicineTypeAddedUser")
                        .WithMany("AddedMedicineTypes")
                        .HasForeignKey("AddedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "MedicineTypeUpdatedUser")
                        .WithMany("UpdatedMedicineTypes")
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.News", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.User", "NewsUpdatedUser")
                        .WithMany("UpdatedNews")
                        .HasForeignKey("UpdatedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "SenderUser")
                        .WithMany("SendersNews")
                        .HasForeignKey("UserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.UserType", "ReceiverUserTypes")
                        .WithMany("ReceiversNews")
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.Patient", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.User", "PatientAddedUser")
                        .WithMany("AddedPatients")
                        .HasForeignKey("AddedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.PatientType", "PatientType")
                        .WithMany("Patients")
                        .HasForeignKey("PatientTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "PatientUser")
                        .WithMany("UserPatient")
                        .HasForeignKey("PatientUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "PatientUpdatedUser")
                        .WithMany("UpdatedPatients")
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.PatientType", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.User", "PatientTypeAddedUser")
                        .WithMany("AddedPatientTypes")
                        .HasForeignKey("AddedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "PatientTypeUpdatedUser")
                        .WithMany("UpdatedPatientTypes")
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.Permission", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.User", "PermissionAddedUser")
                        .WithMany("AddedPermission")
                        .HasForeignKey("AddedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "PermissionUpdatedUser")
                        .WithMany("UpdatedPermission")
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.Reservation", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.User", "ReservationAddedUser")
                        .WithMany("AddedReservation")
                        .HasForeignKey("AddedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.Patient", "Patients")
                        .WithMany("Reservations")
                        .HasForeignKey("PatientID");

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "ReservationUser")
                        .WithMany("ReservationUser")
                        .HasForeignKey("ReservationUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "ReservationUpdatedUser")
                        .WithMany("UpdatedReservation")
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.Specialization", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.User", "SpecializationAddedUser")
                        .WithMany("AddedUserSpecialization")
                        .HasForeignKey("AddedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "SpecializationUpdatedUser")
                        .WithMany("UpdatedUserSpecialization")
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.Treatment", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.User", "TreatmentAddedUser")
                        .WithMany("AddedTreatments")
                        .HasForeignKey("AddedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "TreatmentUpdatedUser")
                        .WithMany("UpdatedTreatments")
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.User", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.UserType", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.User", "UserTypeAddedUser")
                        .WithMany("AddedUserTypes")
                        .HasForeignKey("AddedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "UserTypeUpdatedUser")
                        .WithMany("UpdatedUserTypes")
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.UserTypePermission", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.User", "UserTypePermissionAddedUser")
                        .WithMany("AddedUserTypePermission")
                        .HasForeignKey("AddedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "UserTypePermissionUpdatedUser")
                        .WithMany("UpdatedUserTypePermission")
                        .HasForeignKey("UpdatedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.UserType", "UserType")
                        .WithMany("UserTypePermissions")
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.Visit", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.User", "VisitAddedUser")
                        .WithMany("AddedVisits")
                        .HasForeignKey("AddedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.Patient", "Patient")
                        .WithMany("Visits")
                        .HasForeignKey("PatientID");

                    b.HasOne("VetClinic.Data.Data.Clinic.Treatment", "Treatment")
                        .WithMany("Visits")
                        .HasForeignKey("TreatmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "VisitUpdatedUser")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdatedUserID");

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "VetUser")
                        .WithMany("VetVisits")
                        .HasForeignKey("VetID");

                    b.HasOne("VetClinic.Data.Data.Clinic.User", "VisitUser")
                        .WithMany("UserVisits")
                        .HasForeignKey("VisitUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.VisitMedicine", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.Medicine", "Medicine")
                        .WithMany("VisitMedicines")
                        .HasForeignKey("MedicineID");

                    b.HasOne("VetClinic.Data.Data.Clinic.Visit", "Visit")
                        .WithMany("VisitMedicines")
                        .HasForeignKey("VisitID");
                });

            modelBuilder.Entity("VetClinic.Data.Data.Clinic.VisitTreatment", b =>
                {
                    b.HasOne("VetClinic.Data.Data.Clinic.Treatment", "Treatment")
                        .WithMany()
                        .HasForeignKey("TreatmentID");

                    b.HasOne("VetClinic.Data.Data.Clinic.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitID");
                });
#pragma warning restore 612, 618
        }
    }
}
